package main

import (
	"fmt"

	"github.com/neverDefined/cryptography-playground/pkg/hash"
)

func main() {
	fmt.Println("Bitcoin Merkle Tree Example")
	fmt.Println("===========================")

	// Create sample transaction IDs (32 bytes each)
	tx1 := [32]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20}
	tx2 := [32]byte{0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40}
	tx3 := [32]byte{0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
		0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60}

	leaves := [][32]byte{tx1, tx2, tx3}

	fmt.Printf("Transaction 1: %x\n", tx1)
	fmt.Printf("Transaction 2: %x\n", tx2)
	fmt.Printf("Transaction 3: %x\n", tx3)
	fmt.Println()

	// Compute the Merkle root
	root := hash.MerkleRoot(leaves)
	fmt.Printf("Merkle Root: %x\n", root)
	fmt.Println()

	// Example of byte order conversion
	fmt.Println("Byte Order Conversion Example:")
	bigEndian := [32]byte{0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
		0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}
	littleEndian := hash.Reverse32(bigEndian)

	fmt.Printf("Big-endian (explorer format):    %x\n", bigEndian)
	fmt.Printf("Little-endian (internal format): %x\n", littleEndian)
	fmt.Println()

	// Example of proof verification (single leaf tree)
	fmt.Println("Proof Verification Example:")
	leaf := [32]byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20}
	steps := []hash.MerkleProofStep{} // Empty for single leaf
	wantRoot := leaf

	isValid, err := hash.VerifyMerkleProof(leaf, steps, wantRoot)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
	} else {
		fmt.Printf("Proof verification result: %t\n", isValid)
	}
}
